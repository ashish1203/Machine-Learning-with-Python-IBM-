#Decision Tree

# Classification: based on decision tree
# We choose the Entropy as a model selection paramter. Through entropy we can calculate the information gain
# Information gain help in the tree splitting
import numpy as np 
import pandas as pd
from sklearn.tree import DecisionTreeClassifier # for classification
from sklearn import preprocessing # for encoding the categorical data 
from sklearn.model_selection import train_test_split # split the data into tran and test
from sklearn import metrics # for measuring the accuracy score
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix # for confusion matrix

my_data = pd.read_csv("drug200.csv")
#my_data[['Age']]
my_data.index    # tell about the indexes
#my_data.columns # tell abt the coulmn keys
#my_data.values  # tell abt the values of that column

my_data.loc[0:10, 'Age':]  # slicing of data :- row & column

X = my_data[['Age', 'Sex', 'BP', 'Cholesterol', 'Na_to_K']].values
#X[0:5]


l_sex = preprocessing.LabelEncoder() # encoding starts from 0
l_sex.fit(['F','M']) # 2 elemets therefore 0 and 1 
X[:,1] = l_sex.transform(X[:,1]) 

#X[:,1]
#np.size(X[:,1])

l_BP = preprocessing.LabelEncoder() # encoding starts from 0
l_BP.fit([ 'LOW', 'NORMAL', 'HIGH']) # 3 elemets therefore 0 , 1 , 2
X[:,2] = l_BP.transform(X[:,2])

#X[:,2]

l_Chol = preprocessing.LabelEncoder()
l_Chol.fit([ 'NORMAL', 'HIGH'])
X[:,3] = l_Chol.transform(X[:,3]) 

#X[:,3]
#print(X[0:5])

# target variable
y = my_data["Drug"]
#print(y[0:5])


# data split
X_trainset, X_testset, y_trainset, y_testset = train_test_split(X, y, test_size=0.3, random_state=3)
#print (np.shape(X_trainset))
#print (np.shape(X_testset))
#print (np.shape(y_trainset))
#print (np.shape(y_testset))
#print(np.shape(X))

#print (y_testset)

# Model the decision tree: Entropy- measures the information gain
drugTree = DecisionTreeClassifier(criterion="entropy", max_depth = 4) # entropy how much is the randomness in data
drugTree # it shows the default parameters

# fit the training data 
drugTree.fit(X_trainset,y_trainset)

#Prediction of test data
pred = drugTree.predict(X_testset)
#pred
#print (pred [0:5])
#print (y_testset [0:5])

# Measure the accuracy using accuracy score 
print("DecisionTrees's Accuracy: ", metrics.accuracy_score(y_testset, pred))

#Measure the accuracy using confusion matrix
cm=confusion_matrix(y_testset, pred)
diagonal_sum = cm.trace()
sum_of_all_elements = cm.sum()
Acc= diagonal_sum/sum_of_all_elements
Acc